// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from ".././types/input";

export interface ClusterAuthentication {
    sans?: pulumi.Input<pulumi.Input<string>[]>;
    strategy?: pulumi.Input<string>;
    webhook?: pulumi.Input<inputs.ClusterAuthenticationWebhook>;
}

export interface ClusterAuthenticationWebhook {
    cacheTimeout?: pulumi.Input<string>;
    configFile?: pulumi.Input<string>;
}

export interface ClusterAuthorization {
    mode?: pulumi.Input<string>;
    options?: pulumi.Input<{[key: string]: any}>;
}

export interface ClusterBastionHost {
    address: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    sshAgentAuth?: pulumi.Input<boolean>;
    sshCert?: pulumi.Input<string>;
    sshCertPath?: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    sshKeyPath?: pulumi.Input<string>;
    user: pulumi.Input<string>;
}

export interface ClusterCertificate {
    certificate?: pulumi.Input<string>;
    commonName?: pulumi.Input<string>;
    config?: pulumi.Input<string>;
    configEnvName?: pulumi.Input<string>;
    configPath?: pulumi.Input<string>;
    envName?: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    keyEnvName?: pulumi.Input<string>;
    keyPath?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    ouName?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
}

export interface ClusterCloudProvider {
    awsCloudConfig?: pulumi.Input<inputs.ClusterCloudProviderAwsCloudConfig>;
    awsCloudProvider?: pulumi.Input<inputs.ClusterCloudProviderAwsCloudProvider>;
    azureCloudConfig?: pulumi.Input<inputs.ClusterCloudProviderAzureCloudConfig>;
    azureCloudProvider?: pulumi.Input<inputs.ClusterCloudProviderAzureCloudProvider>;
    customCloudConfig?: pulumi.Input<string>;
    customCloudProvider?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    openstackCloudConfig?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudConfig>;
    openstackCloudProvider?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudProvider>;
    vsphereCloudConfig?: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudConfig>;
    vsphereCloudProvider?: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudProvider>;
}

export interface ClusterCloudProviderAwsCloudConfig {
    global?: pulumi.Input<inputs.ClusterCloudProviderAwsCloudConfigGlobal>;
    serviceOverrides?: pulumi.Input<pulumi.Input<inputs.ClusterCloudProviderAwsCloudConfigServiceOverride>[]>;
}

export interface ClusterCloudProviderAwsCloudConfigGlobal {
    disableSecurityGroupIngress?: pulumi.Input<boolean>;
    disableStrictZoneCheck?: pulumi.Input<boolean>;
    elbSecurityGroup?: pulumi.Input<string>;
    kubernetesClusterId?: pulumi.Input<string>;
    kubernetesClusterTag?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    routeTableId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    vpc?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface ClusterCloudProviderAwsCloudConfigServiceOverride {
    key?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    service: pulumi.Input<string>;
    signingMethod?: pulumi.Input<string>;
    signingName?: pulumi.Input<string>;
    signingRegion?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface ClusterCloudProviderAwsCloudProvider {
    global?: pulumi.Input<inputs.ClusterCloudProviderAwsCloudProviderGlobal>;
    serviceOverrides?: pulumi.Input<pulumi.Input<inputs.ClusterCloudProviderAwsCloudProviderServiceOverride>[]>;
}

export interface ClusterCloudProviderAwsCloudProviderGlobal {
    disableSecurityGroupIngress?: pulumi.Input<boolean>;
    disableStrictZoneCheck?: pulumi.Input<boolean>;
    elbSecurityGroup?: pulumi.Input<string>;
    kubernetesClusterId?: pulumi.Input<string>;
    kubernetesClusterTag?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    routeTableId?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    vpc?: pulumi.Input<string>;
    zone?: pulumi.Input<string>;
}

export interface ClusterCloudProviderAwsCloudProviderServiceOverride {
    key?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    service: pulumi.Input<string>;
    signingMethod?: pulumi.Input<string>;
    signingName?: pulumi.Input<string>;
    signingRegion?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface ClusterCloudProviderAzureCloudConfig {
    aadClientCertPassword?: pulumi.Input<string>;
    aadClientCertPath?: pulumi.Input<string>;
    aadClientId: pulumi.Input<string>;
    aadClientSecret: pulumi.Input<string>;
    cloud?: pulumi.Input<string>;
    cloudProviderBackoff?: pulumi.Input<boolean>;
    cloudProviderBackoffDuration?: pulumi.Input<number>;
    cloudProviderBackoffExponent?: pulumi.Input<number>;
    cloudProviderBackoffJitter?: pulumi.Input<number>;
    cloudProviderBackoffRetries?: pulumi.Input<number>;
    cloudProviderRateLimit?: pulumi.Input<boolean>;
    cloudProviderRateLimitBucket?: pulumi.Input<number>;
    cloudProviderRateLimitQps?: pulumi.Input<number>;
    loadBalancerSku?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    maximumLoadBalancerRuleCount?: pulumi.Input<number>;
    primaryAvailabilitySetName?: pulumi.Input<string>;
    primaryScaleSetName?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    routeTableName?: pulumi.Input<string>;
    securityGroupName?: pulumi.Input<string>;
    subnetName?: pulumi.Input<string>;
    subscriptionId: pulumi.Input<string>;
    tenantId: pulumi.Input<string>;
    useInstanceMetadata?: pulumi.Input<boolean>;
    useManagedIdentityExtension?: pulumi.Input<boolean>;
    vmType?: pulumi.Input<string>;
    vnetName?: pulumi.Input<string>;
    vnetResourceGroup?: pulumi.Input<string>;
}

export interface ClusterCloudProviderAzureCloudProvider {
    aadClientCertPassword?: pulumi.Input<string>;
    aadClientCertPath?: pulumi.Input<string>;
    aadClientId: pulumi.Input<string>;
    aadClientSecret: pulumi.Input<string>;
    cloud?: pulumi.Input<string>;
    cloudProviderBackoff?: pulumi.Input<boolean>;
    cloudProviderBackoffDuration?: pulumi.Input<number>;
    cloudProviderBackoffExponent?: pulumi.Input<number>;
    cloudProviderBackoffJitter?: pulumi.Input<number>;
    cloudProviderBackoffRetries?: pulumi.Input<number>;
    cloudProviderRateLimit?: pulumi.Input<boolean>;
    cloudProviderRateLimitBucket?: pulumi.Input<number>;
    cloudProviderRateLimitQps?: pulumi.Input<number>;
    loadBalancerSku?: pulumi.Input<string>;
    location?: pulumi.Input<string>;
    maximumLoadBalancerRuleCount?: pulumi.Input<number>;
    primaryAvailabilitySetName?: pulumi.Input<string>;
    primaryScaleSetName?: pulumi.Input<string>;
    resourceGroup?: pulumi.Input<string>;
    routeTableName?: pulumi.Input<string>;
    securityGroupName?: pulumi.Input<string>;
    subnetName?: pulumi.Input<string>;
    subscriptionId: pulumi.Input<string>;
    tenantId: pulumi.Input<string>;
    useInstanceMetadata?: pulumi.Input<boolean>;
    useManagedIdentityExtension?: pulumi.Input<boolean>;
    vmType?: pulumi.Input<string>;
    vnetName?: pulumi.Input<string>;
    vnetResourceGroup?: pulumi.Input<string>;
}

export interface ClusterCloudProviderOpenstackCloudConfig {
    blockStorage?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudConfigBlockStorage>;
    global: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudConfigGlobal>;
    loadBalancer?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudConfigLoadBalancer>;
    metadata?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudConfigMetadata>;
    route?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudConfigRoute>;
}

export interface ClusterCloudProviderOpenstackCloudConfigBlockStorage {
    bsVersion?: pulumi.Input<string>;
    ignoreVolumeAz?: pulumi.Input<boolean>;
    trustDevicePath?: pulumi.Input<boolean>;
}

export interface ClusterCloudProviderOpenstackCloudConfigGlobal {
    authUrl: pulumi.Input<string>;
    caFile?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    tenantName?: pulumi.Input<string>;
    trustId?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface ClusterCloudProviderOpenstackCloudConfigLoadBalancer {
    createMonitor?: pulumi.Input<boolean>;
    floatingNetworkId?: pulumi.Input<string>;
    lbMethod?: pulumi.Input<string>;
    lbProvider?: pulumi.Input<string>;
    lbVersion?: pulumi.Input<string>;
    manageSecurityGroups?: pulumi.Input<boolean>;
    monitorDelay?: pulumi.Input<string>;
    monitorMaxRetries?: pulumi.Input<number>;
    monitorTimeout?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    useOctavia?: pulumi.Input<boolean>;
}

export interface ClusterCloudProviderOpenstackCloudConfigMetadata {
    requestTimeout?: pulumi.Input<number>;
    searchOrder?: pulumi.Input<string>;
}

export interface ClusterCloudProviderOpenstackCloudConfigRoute {
    routerId?: pulumi.Input<string>;
}

export interface ClusterCloudProviderOpenstackCloudProvider {
    blockStorage?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudProviderBlockStorage>;
    global: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudProviderGlobal>;
    loadBalancer?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudProviderLoadBalancer>;
    metadata?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudProviderMetadata>;
    route?: pulumi.Input<inputs.ClusterCloudProviderOpenstackCloudProviderRoute>;
}

export interface ClusterCloudProviderOpenstackCloudProviderBlockStorage {
    bsVersion?: pulumi.Input<string>;
    ignoreVolumeAz?: pulumi.Input<boolean>;
    trustDevicePath?: pulumi.Input<boolean>;
}

export interface ClusterCloudProviderOpenstackCloudProviderGlobal {
    authUrl: pulumi.Input<string>;
    caFile?: pulumi.Input<string>;
    domainId?: pulumi.Input<string>;
    domainName?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    tenantId?: pulumi.Input<string>;
    tenantName?: pulumi.Input<string>;
    trustId?: pulumi.Input<string>;
    userId?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface ClusterCloudProviderOpenstackCloudProviderLoadBalancer {
    createMonitor?: pulumi.Input<boolean>;
    floatingNetworkId?: pulumi.Input<string>;
    lbMethod?: pulumi.Input<string>;
    lbProvider?: pulumi.Input<string>;
    lbVersion?: pulumi.Input<string>;
    manageSecurityGroups?: pulumi.Input<boolean>;
    monitorDelay?: pulumi.Input<string>;
    monitorMaxRetries?: pulumi.Input<number>;
    monitorTimeout?: pulumi.Input<string>;
    subnetId?: pulumi.Input<string>;
    useOctavia?: pulumi.Input<boolean>;
}

export interface ClusterCloudProviderOpenstackCloudProviderMetadata {
    requestTimeout?: pulumi.Input<number>;
    searchOrder?: pulumi.Input<string>;
}

export interface ClusterCloudProviderOpenstackCloudProviderRoute {
    routerId?: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudConfig {
    disk?: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudConfigDisk>;
    global?: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudConfigGlobal>;
    network?: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudConfigNetwork>;
    virtualCenters: pulumi.Input<pulumi.Input<inputs.ClusterCloudProviderVsphereCloudConfigVirtualCenter>[]>;
    workspace: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudConfigWorkspace>;
}

export interface ClusterCloudProviderVsphereCloudConfigDisk {
    scsiControllerType?: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudConfigGlobal {
    datacenter?: pulumi.Input<string>;
    datacenters?: pulumi.Input<string>;
    datastore?: pulumi.Input<string>;
    insecureFlag?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    soapRoundtripCount?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
    vmName?: pulumi.Input<string>;
    vmUuid?: pulumi.Input<string>;
    workingDir?: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudConfigNetwork {
    publicNetwork?: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudConfigVirtualCenter {
    datacenters: pulumi.Input<string>;
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    soapRoundtripCount?: pulumi.Input<number>;
    user: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudConfigWorkspace {
    datacenter: pulumi.Input<string>;
    defaultDatastore?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    resourcepoolPath?: pulumi.Input<string>;
    server: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudProvider {
    disk?: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudProviderDisk>;
    global?: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudProviderGlobal>;
    network?: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudProviderNetwork>;
    virtualCenters: pulumi.Input<pulumi.Input<inputs.ClusterCloudProviderVsphereCloudProviderVirtualCenter>[]>;
    workspace: pulumi.Input<inputs.ClusterCloudProviderVsphereCloudProviderWorkspace>;
}

export interface ClusterCloudProviderVsphereCloudProviderDisk {
    scsiControllerType?: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudProviderGlobal {
    datacenter?: pulumi.Input<string>;
    datacenters?: pulumi.Input<string>;
    datastore?: pulumi.Input<string>;
    insecureFlag?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    soapRoundtripCount?: pulumi.Input<number>;
    user?: pulumi.Input<string>;
    vmName?: pulumi.Input<string>;
    vmUuid?: pulumi.Input<string>;
    workingDir?: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudProviderNetwork {
    publicNetwork?: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudProviderVirtualCenter {
    datacenters: pulumi.Input<string>;
    name: pulumi.Input<string>;
    password: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    soapRoundtripCount?: pulumi.Input<number>;
    user: pulumi.Input<string>;
}

export interface ClusterCloudProviderVsphereCloudProviderWorkspace {
    datacenter: pulumi.Input<string>;
    defaultDatastore?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    resourcepoolPath?: pulumi.Input<string>;
    server: pulumi.Input<string>;
}

export interface ClusterControlPlaneHost {
    address?: pulumi.Input<string>;
    nodeName?: pulumi.Input<string>;
}

export interface ClusterDns {
    nodeSelector?: pulumi.Input<{[key: string]: any}>;
    provider?: pulumi.Input<string>;
    reverseCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    upstreamNameservers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterEtcdHost {
    address?: pulumi.Input<string>;
    nodeName?: pulumi.Input<string>;
}

export interface ClusterInactiveHost {
    address?: pulumi.Input<string>;
    nodeName?: pulumi.Input<string>;
}

export interface ClusterIngress {
    dnsPolicy?: pulumi.Input<string>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    nodeSelector?: pulumi.Input<{[key: string]: any}>;
    options?: pulumi.Input<{[key: string]: any}>;
    provider?: pulumi.Input<string>;
}

export interface ClusterMonitoring {
    nodeSelector?: pulumi.Input<{[key: string]: any}>;
    options?: pulumi.Input<{[key: string]: any}>;
    provider?: pulumi.Input<string>;
}

export interface ClusterNetwork {
    calicoNetworkProvider?: pulumi.Input<inputs.ClusterNetworkCalicoNetworkProvider>;
    canalNetworkProvider?: pulumi.Input<inputs.ClusterNetworkCanalNetworkProvider>;
    flannelNetworkProvider?: pulumi.Input<inputs.ClusterNetworkFlannelNetworkProvider>;
    mtu?: pulumi.Input<number>;
    options?: pulumi.Input<{[key: string]: any}>;
    plugin?: pulumi.Input<string>;
    weaveNetworkProvider?: pulumi.Input<inputs.ClusterNetworkWeaveNetworkProvider>;
}

export interface ClusterNetworkCalicoNetworkProvider {
    cloudProvider?: pulumi.Input<string>;
}

export interface ClusterNetworkCanalNetworkProvider {
    iface?: pulumi.Input<string>;
}

export interface ClusterNetworkFlannelNetworkProvider {
    iface?: pulumi.Input<string>;
}

export interface ClusterNetworkWeaveNetworkProvider {
    password: pulumi.Input<string>;
}

export interface ClusterNode {
    address: pulumi.Input<string>;
    dockerSocket?: pulumi.Input<string>;
    hostnameOverride?: pulumi.Input<string>;
    internalAddress?: pulumi.Input<string>;
    labels?: pulumi.Input<{[key: string]: any}>;
    nodeName?: pulumi.Input<string>;
    port?: pulumi.Input<string>;
    roles: pulumi.Input<pulumi.Input<string>[]>;
    rolesDeprecated?: pulumi.Input<string>;
    sshAgentAuth?: pulumi.Input<boolean>;
    sshCert?: pulumi.Input<string>;
    sshCertPath?: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    sshKeyPath?: pulumi.Input<string>;
    taints?: pulumi.Input<pulumi.Input<inputs.ClusterNodeTaint>[]>;
    user: pulumi.Input<string>;
}

export interface ClusterNodeTaint {
    effect?: pulumi.Input<string>;
    key: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ClusterPrivateRegistry {
    isDefault?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    url: pulumi.Input<string>;
    user?: pulumi.Input<string>;
}

export interface ClusterRestore {
    restore?: pulumi.Input<boolean>;
    snapshotName?: pulumi.Input<string>;
}

export interface ClusterRotateCertificates {
    caCertificates?: pulumi.Input<boolean>;
    services?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ClusterRunningSystemImages {
    alpine?: pulumi.Input<string>;
    calicoCni?: pulumi.Input<string>;
    calicoControllers?: pulumi.Input<string>;
    calicoCtl?: pulumi.Input<string>;
    calicoFlexVol?: pulumi.Input<string>;
    calicoNode?: pulumi.Input<string>;
    canalCni?: pulumi.Input<string>;
    canalFlannel?: pulumi.Input<string>;
    canalFlexVol?: pulumi.Input<string>;
    canalNode?: pulumi.Input<string>;
    certDownloader?: pulumi.Input<string>;
    coredns?: pulumi.Input<string>;
    corednsAutoscaler?: pulumi.Input<string>;
    dnsmasq?: pulumi.Input<string>;
    etcd?: pulumi.Input<string>;
    flannel?: pulumi.Input<string>;
    flannelCni?: pulumi.Input<string>;
    ingress?: pulumi.Input<string>;
    ingressBackend?: pulumi.Input<string>;
    kubeDns?: pulumi.Input<string>;
    kubeDnsAutoscaler?: pulumi.Input<string>;
    kubeDnsSidecar?: pulumi.Input<string>;
    kubernetes?: pulumi.Input<string>;
    kubernetesServicesSidecar?: pulumi.Input<string>;
    metricsServer?: pulumi.Input<string>;
    nginxProxy?: pulumi.Input<string>;
    nodelocal?: pulumi.Input<string>;
    podInfraContainer?: pulumi.Input<string>;
    weaveCni?: pulumi.Input<string>;
    weaveNode?: pulumi.Input<string>;
    windowsPodInfraContainer?: pulumi.Input<string>;
}

export interface ClusterServices {
    etcd?: pulumi.Input<inputs.ClusterServicesEtcd>;
    kubeApi?: pulumi.Input<inputs.ClusterServicesKubeApi>;
    kubeController?: pulumi.Input<inputs.ClusterServicesKubeController>;
    kubelet?: pulumi.Input<inputs.ClusterServicesKubelet>;
    kubeproxy?: pulumi.Input<inputs.ClusterServicesKubeproxy>;
    scheduler?: pulumi.Input<inputs.ClusterServicesScheduler>;
}

export interface ClusterServicesEtcd {
    backupConfig?: pulumi.Input<inputs.ClusterServicesEtcdBackupConfig>;
    caCert?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    creation?: pulumi.Input<string>;
    externalUrls?: pulumi.Input<pulumi.Input<string>[]>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    gid?: pulumi.Input<number>;
    image?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    retention?: pulumi.Input<string>;
    snapshot?: pulumi.Input<boolean>;
    uid?: pulumi.Input<number>;
}

export interface ClusterServicesEtcdBackupConfig {
    enabled?: pulumi.Input<boolean>;
    intervalHours?: pulumi.Input<number>;
    retention?: pulumi.Input<number>;
    s3BackupConfig?: pulumi.Input<inputs.ClusterServicesEtcdBackupConfigS3BackupConfig>;
    safeTimestamp?: pulumi.Input<boolean>;
}

export interface ClusterServicesEtcdBackupConfigS3BackupConfig {
    accessKey?: pulumi.Input<string>;
    bucketName?: pulumi.Input<string>;
    customCa?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
}

export interface ClusterServicesEtcdDeprecated {
    backupConfig?: pulumi.Input<inputs.ClusterServicesEtcdDeprecatedBackupConfig>;
    caCert?: pulumi.Input<string>;
    cert?: pulumi.Input<string>;
    creation?: pulumi.Input<string>;
    externalUrls?: pulumi.Input<pulumi.Input<string>[]>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    gid?: pulumi.Input<number>;
    image?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    path?: pulumi.Input<string>;
    retention?: pulumi.Input<string>;
    snapshot?: pulumi.Input<boolean>;
    uid?: pulumi.Input<number>;
}

export interface ClusterServicesEtcdDeprecatedBackupConfig {
    enabled?: pulumi.Input<boolean>;
    intervalHours?: pulumi.Input<number>;
    retention?: pulumi.Input<number>;
    s3BackupConfig?: pulumi.Input<inputs.ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig>;
    safeTimestamp?: pulumi.Input<boolean>;
}

export interface ClusterServicesEtcdDeprecatedBackupConfigS3BackupConfig {
    accessKey?: pulumi.Input<string>;
    bucketName?: pulumi.Input<string>;
    customCa?: pulumi.Input<string>;
    endpoint?: pulumi.Input<string>;
    folder?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    secretKey?: pulumi.Input<string>;
}

export interface ClusterServicesKubeApi {
    alwaysPullImages?: pulumi.Input<boolean>;
    auditLog?: pulumi.Input<inputs.ClusterServicesKubeApiAuditLog>;
    eventRateLimit?: pulumi.Input<inputs.ClusterServicesKubeApiEventRateLimit>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
    podSecurityPolicy?: pulumi.Input<boolean>;
    secretsEncryptionConfig?: pulumi.Input<inputs.ClusterServicesKubeApiSecretsEncryptionConfig>;
    serviceClusterIpRange?: pulumi.Input<string>;
    serviceNodePortRange?: pulumi.Input<string>;
}

export interface ClusterServicesKubeApiAuditLog {
    configuration?: pulumi.Input<inputs.ClusterServicesKubeApiAuditLogConfiguration>;
    enabled?: pulumi.Input<boolean>;
}

export interface ClusterServicesKubeApiAuditLogConfiguration {
    format?: pulumi.Input<string>;
    maxAge?: pulumi.Input<number>;
    maxBackup?: pulumi.Input<number>;
    maxSize?: pulumi.Input<number>;
    path?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
}

export interface ClusterServicesKubeApiDeprecated {
    alwaysPullImages?: pulumi.Input<boolean>;
    auditLog?: pulumi.Input<inputs.ClusterServicesKubeApiDeprecatedAuditLog>;
    eventRateLimit?: pulumi.Input<inputs.ClusterServicesKubeApiDeprecatedEventRateLimit>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
    podSecurityPolicy?: pulumi.Input<boolean>;
    secretsEncryptionConfig?: pulumi.Input<inputs.ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig>;
    serviceClusterIpRange?: pulumi.Input<string>;
    serviceNodePortRange?: pulumi.Input<string>;
}

export interface ClusterServicesKubeApiDeprecatedAuditLog {
    configuration?: pulumi.Input<inputs.ClusterServicesKubeApiDeprecatedAuditLogConfiguration>;
    enabled?: pulumi.Input<boolean>;
}

export interface ClusterServicesKubeApiDeprecatedAuditLogConfiguration {
    format?: pulumi.Input<string>;
    maxAge?: pulumi.Input<number>;
    maxBackup?: pulumi.Input<number>;
    maxSize?: pulumi.Input<number>;
    path?: pulumi.Input<string>;
    policy?: pulumi.Input<string>;
}

export interface ClusterServicesKubeApiDeprecatedEventRateLimit {
    enabled?: pulumi.Input<boolean>;
}

export interface ClusterServicesKubeApiDeprecatedSecretsEncryptionConfig {
    enabled?: pulumi.Input<boolean>;
}

export interface ClusterServicesKubeApiEventRateLimit {
    enabled?: pulumi.Input<boolean>;
}

export interface ClusterServicesKubeApiSecretsEncryptionConfig {
    enabled?: pulumi.Input<boolean>;
}

export interface ClusterServicesKubeController {
    clusterCidr?: pulumi.Input<string>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
    serviceClusterIpRange?: pulumi.Input<string>;
}

export interface ClusterServicesKubeControllerDeprecated {
    clusterCidr?: pulumi.Input<string>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
    serviceClusterIpRange?: pulumi.Input<string>;
}

export interface ClusterServicesKubeProxyDeprecated {
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
}

export interface ClusterServicesKubeSchedulerDeprecated {
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
}

export interface ClusterServicesKubelet {
    clusterDnsServer?: pulumi.Input<string>;
    clusterDomain?: pulumi.Input<string>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    failSwapOn?: pulumi.Input<boolean>;
    generateServingCertificate?: pulumi.Input<boolean>;
    image?: pulumi.Input<string>;
    infraContainerImage?: pulumi.Input<string>;
}

export interface ClusterServicesKubeletDeprecated {
    clusterDnsServer?: pulumi.Input<string>;
    clusterDomain?: pulumi.Input<string>;
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    failSwapOn?: pulumi.Input<boolean>;
    generateServingCertificate?: pulumi.Input<boolean>;
    image?: pulumi.Input<string>;
    infraContainerImage?: pulumi.Input<string>;
}

export interface ClusterServicesKubeproxy {
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
}

export interface ClusterServicesScheduler {
    extraArgs?: pulumi.Input<{[key: string]: any}>;
    extraBinds?: pulumi.Input<pulumi.Input<string>[]>;
    extraEnvs?: pulumi.Input<pulumi.Input<string>[]>;
    image?: pulumi.Input<string>;
}

export interface ClusterSystemImages {
    alpine?: pulumi.Input<string>;
    calicoCni?: pulumi.Input<string>;
    calicoControllers?: pulumi.Input<string>;
    calicoCtl?: pulumi.Input<string>;
    calicoFlexVol?: pulumi.Input<string>;
    calicoNode?: pulumi.Input<string>;
    canalCni?: pulumi.Input<string>;
    canalFlannel?: pulumi.Input<string>;
    canalFlexVol?: pulumi.Input<string>;
    canalNode?: pulumi.Input<string>;
    certDownloader?: pulumi.Input<string>;
    coredns?: pulumi.Input<string>;
    corednsAutoscaler?: pulumi.Input<string>;
    dnsmasq?: pulumi.Input<string>;
    etcd?: pulumi.Input<string>;
    flannel?: pulumi.Input<string>;
    flannelCni?: pulumi.Input<string>;
    ingress?: pulumi.Input<string>;
    ingressBackend?: pulumi.Input<string>;
    kubeDns?: pulumi.Input<string>;
    kubeDnsAutoscaler?: pulumi.Input<string>;
    kubeDnsSidecar?: pulumi.Input<string>;
    kubernetes?: pulumi.Input<string>;
    kubernetesServicesSidecar?: pulumi.Input<string>;
    metricsServer?: pulumi.Input<string>;
    nginxProxy?: pulumi.Input<string>;
    nodelocal?: pulumi.Input<string>;
    podInfraContainer?: pulumi.Input<string>;
    weaveCni?: pulumi.Input<string>;
    weaveNode?: pulumi.Input<string>;
    windowsPodInfraContainer?: pulumi.Input<string>;
}

export interface ClusterUpgradeStrategy {
    drain?: pulumi.Input<boolean>;
    drainInput?: pulumi.Input<inputs.ClusterUpgradeStrategyDrainInput>;
    maxUnavailableControlplane?: pulumi.Input<string>;
    maxUnavailableWorker?: pulumi.Input<string>;
}

export interface ClusterUpgradeStrategyDrainInput {
    deleteLocalData?: pulumi.Input<boolean>;
    force?: pulumi.Input<boolean>;
    gracePeriod?: pulumi.Input<number>;
    ignoreDaemonSets?: pulumi.Input<boolean>;
    timeout?: pulumi.Input<number>;
}

export interface ClusterWorkerHost {
    address?: pulumi.Input<string>;
    nodeName?: pulumi.Input<string>;
}
